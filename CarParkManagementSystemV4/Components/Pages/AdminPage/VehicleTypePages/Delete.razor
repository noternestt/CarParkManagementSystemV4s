@page "/vehicletypes/delete"
@using Microsoft.EntityFrameworkCore
@using CarParkManagementSystemV4.Domain
@inject IDbContextFactory<CarParkManagementSystemV4.Data.CarParkManagementSystemV4Context> DbFactory
@inject NavigationManager NavigationManager

<h1>Delete Vehicle Type</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>VehicleType</h2>
    <hr />
    @if (vehicletype is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">TypeName</dt>
            <dd class="col-sm-10">@vehicletype.TypeName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@vehicletype.Description</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@vehicletype.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@vehicletype.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@vehicletype.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@vehicletype.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="vehicletype" OnValidSubmit="DeleteVehicleType" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(vehicletype is null)">Delete</button> |
            <a href="/vehicletypes">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private VehicleType? vehicletype;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        vehicletype = await context.VehicleType.FirstOrDefaultAsync(m => m.Id == Id);

        if (vehicletype is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteVehicleType()
    {
        using var context = DbFactory.CreateDbContext();
        context.VehicleType.Remove(vehicletype!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/vehicletypes");
    }
}
