@page "/vehicletypes/create"
@using Microsoft.EntityFrameworkCore
@using CarParkManagementSystemV4.Domain
@inject IDbContextFactory<CarParkManagementSystemV4.Data.CarParkManagementSystemV4Context> DbFactory
@inject NavigationManager NavigationManager

<h1>Create Vehicle Type</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="VehicleType" OnValidSubmit="AddVehicleType" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="typename" class="form-label">TypeName:</label> 
                <InputText id="typename" @bind-Value="VehicleType.TypeName" class="form-control" /> 
                <ValidationMessage For="() => VehicleType.TypeName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="VehicleType.Description" class="form-control" /> 
                <ValidationMessage For="() => VehicleType.Description" class="text-danger" /> 
            </div>                
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/vehicletypes">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private VehicleType VehicleType { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddVehicleType()
    {
        using var context = DbFactory.CreateDbContext();
        VehicleType.CreatedBy = "System";
        VehicleType.UpdatedBy = "System";
        VehicleType.DateCreated = DateTime.Now;
        VehicleType.DateUpdated = DateTime.Now;
        context.VehicleType.Add(VehicleType);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/vehicletypes");
    }
}
