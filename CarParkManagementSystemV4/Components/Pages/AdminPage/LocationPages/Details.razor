@page "/locations/details"
@using Microsoft.EntityFrameworkCore
@using CarParkManagementSystemV4.Domain
@inject IDbContextFactory<CarParkManagementSystemV4.Data.CarParkManagementSystemV4Context> DbFactory
@inject NavigationManager NavigationManager

<h1>Details of Vehicle</h1>

<div>
    <h2>Location</h2>
    <hr />
    @if (location is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@location.Address</dd>
            <dt class="col-sm-2">PostalCode</dt>
            <dd class="col-sm-10">@location.PostalCode</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@location.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@location.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@location.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@location.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/locations/edit?id={location.Id}")">Edit</a> |
            <a href="@($"/locations")">Back to List</a>
        </div>
    }
</div>

@code {
    private Location? location;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        location = await context.Location.FirstOrDefaultAsync(m => m.Id == Id);

        if (location is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
