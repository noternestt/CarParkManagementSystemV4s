@page "/paymentmethods"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CarParkManagementSystemV4.Domain
@using CarParkManagementSystemV4.Data
@implements IAsyncDisposable
@inject IDbContextFactory<CarParkManagementSystemV4.Data.CarParkManagementSystemV4Context> DbFactory

<PageTitle>Payment Methods</PageTitle>

<div class="page-header text-center mb-4">
    <h1>Payment Methods</h1>
    <i class="fas fa-credit-card fa-3x mb-3 text-primary"></i>
    <p class="text-muted">Manage your payment options securely. View and modify payment methods below.</p>
</div>
<QuickGrid Class="table" Items="FilteredPaymentMethods">
    <PropertyColumn Property="paymentmethod => paymentmethod.User.FullName" Title="User" />
    <PropertyColumn Property="paymentmethod => paymentmethod.CardNumber" />
    <PropertyColumn Property="paymentmethod => paymentmethod.CardHolderName" />
    <PropertyColumn Property="paymentmethod => paymentmethod.ExpiryDate" />
    <PropertyColumn Property="paymentmethod => paymentmethod.CVV" />
    <PropertyColumn Property="paymentmethod => paymentmethod.PaymentType" />
    <PropertyColumn Property="paymentmethod => paymentmethod.Provider" />
    
    @if (isAdmin)
    {
        <PropertyColumn Property="paymentmethod => paymentmethod.UserId" />
        <PropertyColumn Property="paymentmethod => paymentmethod.DateCreated" />
        <PropertyColumn Property="paymentmethod => paymentmethod.DateUpdated" />
        <PropertyColumn Property="paymentmethod => paymentmethod.CreatedBy" />
        <PropertyColumn Property="paymentmethod => paymentmethod.UpdatedBy" />
    }
    <TemplateColumn Context="paymentmethod">
        <a href="@($"paymentmethods/edit?id={paymentmethod.Id}")">Edit</a> |
        <a href="@($"paymentmethods/details?id={paymentmethod.Id}")">Details</a> |
        <a href="@($"paymentmethods/delete?id={paymentmethod.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private CarParkManagementSystemV4Context context = default!;

    private string userId = string.Empty;
    private bool isAdmin = false;

    @inject AuthenticationStateProvider authenticationStateProvider
    // Filter PaymentMethods by userId
    private IQueryable<PaymentMethod> FilteredPaymentMethods => isAdmin
        ? context.PaymentMethod.Include(pm => pm.User) // Admins can see all bookings
        : context.PaymentMethod.Include(pm => pm.User).Where(e => e.CreatedBy == userId); // Regular users see only their own bookings

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        // Fetch the authentication state
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Extract user information
        userId = user.FindFirst("userId")?.Value ?? string.Empty;
        isAdmin = user.IsInRole("Administrator");
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
